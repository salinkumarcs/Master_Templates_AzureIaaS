{
    "$schema": "http://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "networkSettings": {
            "type": "object",
            "metadata": {
                "description": "Object array with all information to create Azure Foundation neworking information."
            }
        },
        "sharedKey": {
            "type": "string",
            "metadata": {
                "description": "The shared key used for the VirtualNetworkGateways."
            }
        },
        "completeS2S":{
            "type": "bool",
            "metadata": {
                "description": "Boolean to confirm if S2S is needed."
            }
        },
        "expressRoute":{
            "type": "bool",
            "metadata": {
                "description": "Boolean to confirm if VNG is ExpressRoute or VPN."
            }
        },
        "vngSKU": {
            "type": "string",
            "metadata": {
                "description": "The sku of the VNG you want to use."
            },
            "allowedValues": [
                "Standard",
                "ErGw1AZ",
                "Basic",
                "VpnGw1",
                "VpnGw2"
                // https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-about-vpn-gateway-settings
                // https://docs.microsoft.com/en-us/azure/expressroute/expressroute-about-virtual-network-gateways
            ]
        }
    },
    "variables": {
        "apiVersion": "2015-05-01-preview",
        "vnetID1": "[resourceId('Microsoft.Network/virtualNetworks', parameters('networkSettings').virtualNetworks[0].name)]",
        "gatewaySubnetRef1": "[concat(variables('vnetID1'),'/subnets/','GatewaySubnet')]",
        "vnetID2": "[if(greater(length(parameters('networkSettings').virtualNetworks), 1),resourceId('Microsoft.Network/virtualNetworks', parameters('networkSettings').virtualNetworks[1].name),json('null'))]",            
        "gatewaySubnetRef2": "[if(greater(length(parameters('networkSettings').virtualNetworks), 1),concat(variables('vnetID2'),'/subnets/','GatewaySubnet'),json('null'))]",            
        "S2Sconnections": [
            {
                "name": "[if(greater(length(parameters('networkSettings').virtualNetworks), 1),concat(parameters('networkSettings').virtualNetworks[0].gatewayName,'-to-', parameters('networkSettings').virtualNetworks[1].gatewayName),'notdeployed1')]",
                "loc": "[parameters('networkSettings').virtualNetworks[0].location]",
                "vng1": "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('networkSettings').virtualNetworks[0].gatewayName)]",
                "vng2": "[if(greater(length(parameters('networkSettings').virtualNetworks), 1),resourceId('Microsoft.Network/virtualNetworkGateways', parameters('networkSettings').virtualNetworks[1].gatewayName),json('null'))]"
            },
            {
                "name": "[if(greater(length(parameters('networkSettings').virtualNetworks), 1),concat(parameters('networkSettings').virtualNetworks[1].gatewayName,'-to-', parameters('networkSettings').virtualNetworks[0].gatewayName),'notdeployed2')]",               
                "loc": "[if(greater(length(parameters('networkSettings').virtualNetworks), 1),parameters('networkSettings').virtualNetworks[1].location,parameters('networkSettings').virtualNetworks[0].location)]",             
                "vng1": "[if(greater(length(parameters('networkSettings').virtualNetworks), 1),resourceId('Microsoft.Network/virtualNetworkGateways', parameters('networkSettings').virtualNetworks[1].gatewayName),json('null'))]",
                "vng2": "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('networkSettings').virtualNetworks[0].gatewayName)]"
            }
        ]
    },
    "resources": [
        {
            "apiVersion": "2017-10-01",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[parameters('networkSettings').virtualNetworks[copyIndex()].gatewayPublicIPName]",
            "copy": {
                "name": "PIPLoop",
                "count": "[length(parameters('networkSettings').virtualNetworks)]"
            },
            "location": "[parameters('networkSettings').virtualNetworks[copyIndex()].location]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic"
            }
        },
        {
            "apiVersion": "2017-10-01",
            "type": "Microsoft.Network/virtualNetworkGateways",
            "name": "[parameters('networkSettings').virtualNetworks[copyIndex()].gatewayName]",
            "copy": {
                "name": "VNGLoop",
                "count": "[length(parameters('networkSettings').virtualNetworks)]"
            },
            "location": "[parameters('networkSettings').virtualNetworks[copyIndex()].location]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', parameters('networkSettings').virtualNetworks[copyIndex()].gatewayPublicIPName)]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables(concat('gatewaySubnetRef',copyIndex(1)))]"
                            },
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('networkSettings').virtualNetworks[copyIndex()].gatewayPublicIPName)]"
                            }
                        },
                        "name": "vnetGatewayConfig1"
                    }
                ],
                "gatewayType": "[if(bool(parameters('expressRoute')),'ExpressRoute','Vpn')]",
                "vpnType": "RouteBased",
                "enableBgp": "false",
                "sku": {
                    "name": "[parameters('vngSKU')]",
                    "tier": "[parameters('vngSKU')]"
                }
            }
        },
        {
            "condition": "[if(bool(parameters('expressRoute')),bool('false'),parameters('completeS2S'))]",
            "apiVersion": "2017-10-01",
            "type": "Microsoft.Network/connections",
            "name": "[variables('S2Sconnections')[copyIndex()].name]",
            "copy": {
                "name": "S2SLoop",
                "count": "[length(variables('S2Sconnections'))]"
            },
            "location": "[variables('S2Sconnections')[copyIndex()].loc]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworkGateways/', parameters('networkSettings').virtualNetworks[0].gatewayName)]",
                "[if(greater(length(parameters('networkSettings').virtualNetworks), 1),concat('Microsoft.Network/virtualNetworkGateways/', parameters('networkSettings').virtualNetworks[1].gatewayName),concat('Microsoft.Network/virtualNetworkGateways/', parameters('networkSettings').virtualNetworks[0].gatewayName))]"
            ],
            "properties": {
                "virtualNetworkGateway1": {
                    "id": "[variables('S2Sconnections')[copyIndex()].vng1]"
                },
                "virtualNetworkGateway2": {
                    "id": "[variables('S2Sconnections')[copyIndex()].vng2]"
                },
                "connectionType": "Vnet2Vnet",
                "routingWeight": 3,
                "sharedKey": "[parameters('sharedKey')]"
            }
        }
    ]
}